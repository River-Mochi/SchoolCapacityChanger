root = true

[*.cs]
charset = utf-8
end_of_line = crlf
insert_final_newline = true
indent_style = space
indent_size = 4

# ---- General style ----
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Prefer 'var' where it's obvious; otherwise prefer explicit type
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:suggestion

# Style analyzers
dotnet_diagnostic.RCS1146.severity = suggestion   # Use conditional access (keep on)
dotnet_diagnostic.RCS1226.severity = none         # Doc-paragraph nit = off

# Keep flat namespace; don't require folder-matching
dotnet_style_namespace_match_folder = false:silent
dotnet_diagnostic.IDE0130.severity = none         # Namespace vs folder

# Our k/m/s scheme conflicts with IDE1006; quiet it
dotnet_diagnostic.IDE1006.severity = none

# =========================
# Naming symbols (targets)
# =========================
dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_symbols.interfaces.applicable_accessibilities = *

dotnet_naming_symbols.types_and_members.applicable_kinds = class, struct, enum, property, method, event
dotnet_naming_symbols.types_and_members.applicable_accessibilities = *

dotnet_naming_symbols.private_instance_fields.applicable_kinds = field
dotnet_naming_symbols.private_instance_fields.applicable_accessibilities = private

dotnet_naming_symbols.private_static_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_fields.applicable_accessibilities = private

# All const fields, any accessibility
dotnet_naming_symbols.const_fields.applicable_kinds = field
dotnet_naming_symbols.const_fields.required_modifiers = const
dotnet_naming_symbols.const_fields.applicable_accessibilities = *

# Explicitly include private/internal consts too (defensive)
dotnet_naming_symbols.private_internal_const_fields.applicable_kinds = field
dotnet_naming_symbols.private_internal_const_fields.required_modifiers = const
dotnet_naming_symbols.private_internal_const_fields.applicable_accessibilities = private, internal, protected_internal, private_protected

# =========================
# Naming styles (how)
# =========================
dotnet_naming_style.pascal.required_capitalization = pascal_case
dotnet_naming_style.interface_i.required_prefix = I
dotnet_naming_style.m_prefix.required_prefix = m_
dotnet_naming_style.s_prefix.required_prefix = s_
dotnet_naming_style.k_prefix_pascal.required_prefix = k
dotnet_naming_style.k_prefix_pascal.required_capitalization = pascal_case
dotnet_naming_style.camel.required_capitalization = camel_case

# =========================
# Rules (symbols � styles)
# =========================
# Interfaces: IName
dotnet_naming_rule.interfaces_must_start_with_i.symbols = interfaces
dotnet_naming_rule.interfaces_must_start_with_i.style = interface_i
dotnet_naming_rule.interfaces_must_start_with_i.severity = suggestion

# Types & non-field members: PascalCase
dotnet_naming_rule.types_and_members_pascal.symbols = types_and_members
dotnet_naming_rule.types_and_members_pascal.style = pascal
dotnet_naming_rule.types_and_members_pascal.severity = suggestion

# Private instance fields: m_name
dotnet_naming_rule.private_instance_fields_m_prefix.symbols = private_instance_fields
dotnet_naming_rule.private_instance_fields_m_prefix.style = m_prefix
dotnet_naming_rule.private_instance_fields_m_prefix.severity = suggestion

# Private static fields: s_name
dotnet_naming_rule.private_static_fields_s_prefix.symbols = private_static_fields
dotnet_naming_rule.private_static_fields_s_prefix.style = s_prefix
dotnet_naming_rule.private_static_fields_s_prefix.severity = suggestion

# Const fields: kName (all accessibilities)
dotnet_naming_rule.const_fields_k_prefix.symbols = const_fields
dotnet_naming_rule.const_fields_k_prefix.style = k_prefix_pascal
dotnet_naming_rule.const_fields_k_prefix.severity = suggestion

# Private/Internal const fields: kName (defensive duplicate)
dotnet_naming_rule.private_internal_const_fields_k_prefix.symbols = private_internal_const_fields
dotnet_naming_rule.private_internal_const_fields_k_prefix.style = k_prefix_pascal
dotnet_naming_rule.private_internal_const_fields_k_prefix.severity = suggestion

# Turn off CA1822 for False positives for Settings.cs because the game�s Options UI binds to instance
# properties via reflection + attributes. If we make them static, they�ll stop showing/working in the UI.
[Settings/Settings.cs]
dotnet_diagnostic.CA1822.severity = none
[*.cs]
#### Naming styles ####

# Naming rules

dotnet_naming_rule.method_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.method_should_be_pascal_case.symbols = method
dotnet_naming_rule.method_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.property_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.property_should_be_pascal_case.symbols = property
dotnet_naming_rule.property_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.private__internal_const_field_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.private__internal_const_field_should_be_pascal_case.symbols = private__internal_const_field
dotnet_naming_rule.private__internal_const_field_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.event_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.event_should_be_pascal_case.symbols = event
dotnet_naming_rule.event_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.private___internal_static_field_should_be_prefix_s____pascal.severity = suggestion
dotnet_naming_rule.private___internal_static_field_should_be_prefix_s____pascal.symbols = private___internal_static_field
dotnet_naming_rule.private___internal_static_field_should_be_prefix_s____pascal.style = prefix_s____pascal

dotnet_naming_rule.private_instance_field_should_be_prefix_m____pascal.severity = suggestion
dotnet_naming_rule.private_instance_field_should_be_prefix_m____pascal.symbols = private_instance_field
dotnet_naming_rule.private_instance_field_should_be_prefix_m____pascal.style = prefix_m____pascal

dotnet_naming_rule.const_field_should_be_prefix_k__pascale.severity = suggestion
dotnet_naming_rule.const_field_should_be_prefix_k__pascale.symbols = const_field
dotnet_naming_rule.const_field_should_be_prefix_k__pascale.style = prefix_k__pascale

# Symbol specifications

dotnet_naming_symbols.method.applicable_kinds = method
dotnet_naming_symbols.method.applicable_accessibilities = public
dotnet_naming_symbols.method.required_modifiers = 

dotnet_naming_symbols.property.applicable_kinds = property
dotnet_naming_symbols.property.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.property.required_modifiers = 

dotnet_naming_symbols.private__internal_const_field.applicable_kinds = field
dotnet_naming_symbols.private__internal_const_field.applicable_accessibilities = internal, private
dotnet_naming_symbols.private__internal_const_field.required_modifiers = const

dotnet_naming_symbols.event.applicable_kinds = event
dotnet_naming_symbols.event.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.event.required_modifiers = 

dotnet_naming_symbols.private___internal_static_field.applicable_kinds = field
dotnet_naming_symbols.private___internal_static_field.applicable_accessibilities = internal, private, protected_internal, private_protected
dotnet_naming_symbols.private___internal_static_field.required_modifiers = static

dotnet_naming_symbols.private_instance_field.applicable_kinds = field
dotnet_naming_symbols.private_instance_field.applicable_accessibilities = private, private_protected
dotnet_naming_symbols.private_instance_field.required_modifiers = 

dotnet_naming_symbols.const_field.applicable_kinds = field
dotnet_naming_symbols.const_field.applicable_accessibilities = 
dotnet_naming_symbols.const_field.required_modifiers = const

# Naming styles

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.prefix_s____pascal.required_prefix = s_
dotnet_naming_style.prefix_s____pascal.required_suffix = 
dotnet_naming_style.prefix_s____pascal.word_separator = 
dotnet_naming_style.prefix_s____pascal.capitalization = pascal_case

dotnet_naming_style.prefix_m____pascal.required_prefix = m_
dotnet_naming_style.prefix_m____pascal.required_suffix = 
dotnet_naming_style.prefix_m____pascal.word_separator = 
dotnet_naming_style.prefix_m____pascal.capitalization = pascal_case

dotnet_naming_style.prefix_k__pascale.required_prefix = k
dotnet_naming_style.prefix_k__pascale.required_suffix = 
dotnet_naming_style.prefix_k__pascale.word_separator = 
dotnet_naming_style.prefix_k__pascale.capitalization = pascal_case
csharp_indent_labels = one_less_than_current
csharp_using_directive_placement = inside_namespace:silent
csharp_prefer_simple_using_statement = true:suggestion
csharp_prefer_braces = true:silent
csharp_style_namespace_declarations = block_scoped:silent
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_prefer_top_level_statements = true:silent
csharp_style_prefer_primary_constructors = true:suggestion
csharp_prefer_system_threading_lock = true:suggestion
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_accessors = true:silent
csharp_style_expression_bodied_lambdas = true:silent
csharp_style_expression_bodied_local_functions = false:silent

[*.{cs,vb}]
#### Naming styles ####

# Naming rules

dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers = 

# Naming styles

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = 
dotnet_naming_style.begins_with_i.word_separator = 
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case
dotnet_style_operator_placement_when_wrapping = beginning_of_line
tab_width = 4
indent_size = 4
end_of_line = crlf
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent
dotnet_style_explicit_tuple_names = true:suggestion
